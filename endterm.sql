--CREATE DATABASE ENDTERM
USE ENDTERM
/*create table BOOK_ISBN(
	ISBN VARCHAR(250),
	BOOK_NAME VARCHAR(250),
	BOOK_AUTHOR VARCHAR(250),
	NUMBER_BOOK INT,
	ACCESS_NUMBER INT,
	PRIMARY KEY(ISBN))
SELECT * FROM BOOK_ISBN
BULK INSERT BOOK_ISBN
FROM 'C:\Programming\SQL 4 semester\BOOKS.csv'
WITH (format='csv', firstrow=2,fieldterminator=',',rowterminator='0x0a')*/

SELECT * FROM CUSTOMERS

/*create table BOOKS(
	BOOK_ID INT PRIMARY KEY IDENTITY(100,1),
	ISBN VARCHAR(250),
	ACCESS INT DEFAULT 1,
	FOREIGN KEY (ISBN) REFERENCES BOOK_ISBN (ISBN));*/

/*declare @i int, @top int
set @top=11
set @i=(select ACCESS_NUMBER from( select ACCESS_NUMBER , ROW_NUMBER() OVER(ORDER BY book_name ASC) AS row from BOOK_ISBN) as tmp where row=@top) 

while @top>0
	BEGIN
		WHILE @i>0
			BEGIN
				insert into BOOKS(ISBN) select ISBN from( select ISBN , ROW_NUMBER() OVER(ORDER BY book_name ASC) AS row from BOOK_ISBN) as tmp where row=@top
		
				set @i=@i-1
			END
		set @i=(select ACCESS_NUMBER from( select ACCESS_NUMBER , ROW_NUMBER() OVER(ORDER BY book_name ASC) AS row from BOOK_ISBN) as tmp where row=@top-1) 
		set @top=@top-1
	END*/
SELECT * FROM STUDENTS
SELECT * FROM CUSTOMERS

/*CREATE TABLE CUSTOMERS(
	CUST_ID INT PRIMARY KEY,
	CUST_NAME VARCHAR(255) NOT NULL,
	CUST_FACULTY VARCHAR(255) NOT NULL)
*/
DROP TABLE CUSTOMERS
DELETE  CUSTOMERS
/*CREATE TABLE STUDENTS(
	STUDENT_ID INT PRIMARY KEY IDENTITY(202000,1),
	STUDENT_NAME VARCHAR(255) NOT NULL,
	STUDENT_FACULTY VARCHAR(255) NOT NULL)
*/

/*CREATE TABLE TEACHERS(
	TEACHER_ID INT PRIMARY KEY IDENTITY(102000,1),
	TEACHER_NAME VARCHAR(255) NOT NULL,
	TEACHER_FACULTY VARCHAR(255) NOT NULL)
BULK INSERT TEACHERS
FROM 'C:\Programming\SQL 4 semester\TEACHERS2.csv'
WITH (format='csv', firstrow=1,fieldterminator=',',rowterminator='0x0a');*/

INSERT INTO CUSTOMERS SELECT * FROM TEACHERS
SELECT * FROM CUSTOMERS
SELECT * FROM TEACHERS

ALTER TABLE CUSTOMERS 
ADD VIOLATOR INT DEFAULT 0 NOT NULL

ALTER TABLE CUSTOMERS 
DROP COLUMN VIOLATOR 
DROP TABLE ISSUE

CREATE TABLE ISSUE(
CUSTOMER_ID INT FOREIGN KEY REFERENCES CUSTOMERS(CUST_ID),
BOOK_ID INT FOREIGN KEY REFERENCES BOOKS(BOOK_ID) UNIQUE,
ISSUE_DATE DATE NOT NULL,
RETURN_DATE DATE DEFAULT DATEADD(MONTH,12,CONVERT(DATE,SYSDATETIME(),101)),
PRIMARY KEY (BOOK_ID));

CREATE TABLE RETURNED( 
	CUSTOMER_ID INT FOREIGN KEY REFERENCES CUSTOMERS(CUST_ID),
	BOOK_ID INT FOREIGN KEY REFERENCES BOOKS(BOOK_ID) UNIQUE,
	RETURN_DATE DATE NOT NULL,
	ACTUAL_RETURN DATE DEFAULT CONVERT(DATE,SYSDATETIME(),101) ,
	FINE INT DEFAULT 0 CHECK(FINE>-1),
	PRIMARY KEY(BOOK_ID))*/


INSERT INTO ISSUE VALUES(102004,634,'2020-09-12',DEFAULT)
INSERT INTO RETURNED VALUES(102004,634,'2022-06-11','2023-06-13',0)
SELECT * FROM BOOKS WHERE ISBN =569789
SELECT * FROM BOOK_ISBN
SELECT * FROM ISSUE
CREATE PROCEDURE CHANGING_ID @BOOK_ID VARCHAR(25)
AS
UPDATE BOOK_ISBN
SET ACCESS_NUMBER=(SELECT ACCESS_NUMBER FROM BOOK_ISBN WHERE ISBN=(SELECT TOP 1 ISBN FROM BOOKS WHERE BOOK_ID=@BOOK_ID) )-1
WHERE ISBN=(SELECT TOP 1 ISBN FROM BOOKS WHERE BOOK_ID=@BOOK_ID)


CREATE PROCEDURE CHANGING_ISBN @BOOK_ID VARCHAR(25)
AS
UPDATE BOOKS
SET ACCESS=(SELECT ACCESS FROM BOOKS  WHERE BOOK_ID=@BOOK_ID)-1
WHERE BOOK_ID=@BOOK_ID

/*
CREATE PROCEDURE CHANGING_RETURNED @BOOK_ID VARCHAR(25)
AS
UPDATE BOOK_ISBN
SET ACCESS_NUMBER=(SELECT ACCESS_NUMBER FROM BOOK_ISBN WHERE BOOK_NAME=(SELECT TOP 1 BOOK_NAME FROM BOOKS WHERE BOOK_ID=@BOOK_ID))+1
WHERE BOOK_NAME=(SELECT TOP 1 BOOK_NAME FROM BOOKS WHERE BOOK_ID=@BOOK_ID)
SELECT * FROM ISSUE*/
SELECT * FROM RETURNED




SELECT * FROM BOOKS
SELECT * FROM CUSTOMERS
SELECT * FROM ISSUE
--SELECT * FROM BOOK_ISBN
--SELECT * FROM STUDENTS
--SELECT * FROM TEACHERS
SELECT * FROM BLACKLIST



--5 TASK
CREATE TABLE BLACKLIST(
CUSTOMER_ID INT FOREIGN KEY REFERENCES CUSTOMERS(CUST_ID),
PRIMARY KEY(CUSTOMER_ID))

CREATE PROCEDURE GIVE_CUST_BOOK
@CUST_ID INT, @BOOK_ID INT

AS
BEGIN
	IF @CUST_ID NOT IN 
	(SELECT * 
	FROM BLACKLIST)

		IF (SELECT COUNT(CUSTOMER_ID) 
		FROM ISSUE
		WHERE CUSTOMER_ID = @CUST_ID) < 5

			IF (SELECT ACCESS
			FROM BOOKS
			WHERE BOOK_ID = @BOOK_ID) = 1
				INSERT INTO ISSUE
				VALUES(@CUST_ID, @BOOK_ID, Convert(date, getdate()), DATEADD(MONTH, 6, getdate()))
			ELSE
				PRINT 'BOOK IS ALREADY TAKEN'

		ELSE IF (SELECT COUNT(CUSTOMER_ID) 
		FROM ISSUE
		WHERE CUSTOMER_ID = 102001) = 5
			PRINT 'YOU CANNOT TAKE BOOKS, 5 BOOKS IS A LIMIT'

		ELSE
			INSERT INTO BLACKLIST
			VALUES (@CUST_ID)
			IF (SELECT ACCESS
			FROM BOOKS
			WHERE BOOK_ID = @BOOK_ID) = 1
				INSERT INTO ISSUE
				VALUES(@CUST_ID, @BOOK_ID, Convert(date, getdate()), DATEADD(MONTH, 6, getdate()))

	ELSE
		PRINT 'STUDENT IN BLACKLIST'
END;

--DROP PROCEDURE GIVE_CUST_BOOK

CREATE TRIGGER TRIG_INSERT_ISSUE
ON ISSUE
AFTER INSERT
AS
BEGIN
	UPDATE BOOK_ISBN
	SET ACCESS_NUMBER -= 1
	WHERE ISBN = (
		SELECT BI.ISBN 
		FROM BOOK_ISBN BI
		INNER JOIN BOOKS B
		ON BI.ISBN = B.ISBN
		WHERE B.BOOK_ID = (SELECT BOOK_ID FROM INSERTED))
	UPDATE BOOKS
	SET ACCESS = 0
	WHERE BOOK_ID = (SELECT BOOK_ID FROM INSERTED)
END;

CREATE TRIGGER TRIG_VIOLATOR_1
ON BLACKLIST
AFTER INSERT
AS
BEGIN
	UPDATE CUSTOMERS
	SET VIOLATOR = 1
	WHERE CUST_ID = (SELECT CUSTOMER_ID FROM INSERTED)
END;

EXEC GIVE_CUST_BOOK @CUST_ID = 102001, @BOOK_ID = 149


INSERT INTO RETURNED VALUES
(102001, 149, '2023-10-24', '2023-10-24', 0)

CREATE TRIGGER TRIG_INSERT_RET
ON RETURNED
AFTER INSERT
AS
BEGIN
	DELETE FROM BLACKLIST
	WHERE CUSTOMER_ID = (SELECT CUSTOMER_ID FROM INSERTED)
	DELETE FROM ISSUE
	WHERE BOOK_ID = (SELECT BOOK_ID FROM INSERTED)
END;