--CREATE DATABASE LIBRARY
--USE LIBRARY
create table BOOK_ISBN(
	ISBN VARCHAR(250),
	BOOK_NAME VARCHAR(250),
	BOOK_AUTHOR VARCHAR(250),
	NUMBER_BOOK INT,
	ACCESS_NUMBER INT,
	PRIMARY KEY(BOOK_NAME, BOOK_AUTHOR));
/*SELECT * FROM BOOK_ISBN
BULK INSERT BOOK_ISBN
FROM 'C:\Programming\SQL 4 semester\BOOKS.csv'
WITH (format='csv', firstrow=2,fieldterminator=',',rowterminator='0x0a')*/

--DROP TABLE BOOK_ISBN
--SELECT * FROM BOOKS

create table BOOKS(
	BOOK_ID INT PRIMARY KEY IDENTITY(100,1),
	BOOK_NAME VARCHAR(250) ,
	BOOK_AUTHOR VARCHAR(250) ,
	FOREIGN KEY (BOOK_NAME, BOOK_AUTHOR) REFERENCES BOOK_ISBN (BOOK_NAME, BOOK_AUTHOR));

/*
declare @i int, @top int
set @top=11
set @i=(select ACCESS_NUMBER from( select ACCESS_NUMBER , ROW_NUMBER() OVER(ORDER BY book_name ASC) AS row from BOOK_ISBN) as tmp where row=@top) 

while @top>0
	BEGIN
		WHILE @i>0
			BEGIN
				insert into BOOKS select book_name,book_author from( select book_name,book_author , ROW_NUMBER() OVER(ORDER BY book_name ASC) AS row from BOOK_ISBN) as tmp where row=@top
				set @i=@i-1
	
			END
		set @i=(select ACCESS_NUMBER from( select ACCESS_NUMBER , ROW_NUMBER() OVER(ORDER BY book_name ASC) AS row from BOOK_ISBN) as tmp where row=@top-1) 
		set @top=@top-1
	END
*/

CREATE TABLE ISSUE(
CUSTOMER_ID INT NOT NULL,
BOOK_ID INT FOREIGN KEY REFERENCES BOOKS(BOOK_ID) UNIQUE,
ISSUE_DATE DATE NOT NULL,
RETURN_DATE DATE,
PRIMARY KEY (CUSTOMER_ID, BOOK_ID));

--drop table ISSUE
--select * from ISSUE

CREATE TABLE STUDENTS(
	STUDENT_ID INT PRIMARY KEY IDENTITY(202000,1),
	STUDENT_NAME VARCHAR(255) NOT NULL,
	STUDENT_FACULTY VARCHAR(255) NOT NULL);
/*BULK INSERT STUDENTS
FROM 'C:\Programming\SQL 4 semester\STUDENTS3.csv'
WITH (format='csv', firstrow=2,fieldterminator=',',rowterminator='0x0a');*/

CREATE TABLE TEACHERS(
	TEACHER_ID INT PRIMARY KEY IDENTITY(102000,1),
	TEACHER_NAME VARCHAR(255) NOT NULL,
	TEACHER_FACULTY VARCHAR(255) NOT NULL);
/*BULK INSERT TEACHERS
FROM 'C:\Programming\SQL 4 semester\TEACHERS2.csv'
WITH (format='csv', firstrow=1,fieldterminator=',',rowterminator='0x0a');*/
--DROP TABLE TEACHERS
--SELECT * FROM ISSUE
/*
GO
CREATE TRIGGER ISSUE_INSERT
ON ISSUE
FOR INSERT
AS
DECLARE @BOOK_ID INT
SET @BOOK_ID=(SELECT BOOK_ID FROM INSERTED)
IF (SELECT CUSTOMER_ID FROM INSERTED) IN (SELECT STUDENT_ID FROM STUDENTS)

	IF 3<(SELECT COUNT(I.CUSTOMER_ID) FROM ISSUE J, INSERTED I WHERE I.CUSTOMER_ID=J.CUSTOMER_ID )
		BEGIN 
            ROLLBACK TRAN
			PRINT('�������� ����� ������ ��� ��������')
        END
	ELSE
		BEGIN
			UPDATE ISSUE
			SET RETURN_DATE=DATEADD(MONTH,6,ISSUE_DATE)
			WHERE RETURN_DATE=(SELECT RETURN_DATE FROM INSERTED) AND ISSUE_DATE=(SELECT ISSUE_DATE FROM INSERTED)
			PRINT('������ �������� ������� ���������')
			EXEC CHANGING @BOOK_ID
		END

IF (SELECT CUSTOMER_ID FROM INSERTED) IN (SELECT TEACHER_ID FROM TEACHERS)

	IF 5<(SELECT COUNT(I.CUSTOMER_ID) FROM ISSUE J, INSERTED I WHERE I.CUSTOMER_ID=J.CUSTOMER_ID )
		BEGIN 
            ROLLBACK TRAN
			PRINT('�������� ����� ������ ��� �������������')
        END
	ELSE
		BEGIN
			UPDATE ISSUE
			SET RETURN_DATE=DATEADD(MONTH,12,ISSUE_DATE)
			WHERE RETURN_DATE=(SELECT RETURN_DATE FROM INSERTED) AND ISSUE_DATE=(SELECT ISSUE_DATE FROM INSERTED)
			PRINT('������ ������������� ������� ���������')
			EXEC CHANGING @BOOK_ID
		END

IF (SELECT CUSTOMER_ID FROM INSERTED) NOT IN (SELECT TEACHER_ID FROM TEACHERS) AND (SELECT CUSTOMER_ID FROM INSERTED) NOT IN (SELECT STUDENT_ID FROM STUDENTS)
	BEGIN
		ROLLBACK TRAN
		PRINT('�������� �� ��������������� � ����� �������')
	END*/
--SELECT * FROM ISSUE
--SELECT * FROM RETURNED
--INSERT INTO ISSUE VALUES(102005,105,'2021-11-11',DEFAULT)
--DROP TRIGGER ISSUE_INSERT


CREATE TABLE RETURNED( 
	CUSTOMER_ID INT NOT NULL,
	BOOK_ID INT NOT NULL UNIQUE,
	RETURN_DATE DATE NOT NULL,
	ACTUAL_RETURN DATE,
	FINE INT DEFAULT 0 CHECK(FINE>-1),
	PRIMARY KEY(CUSTOMER_ID,BOOK_ID),
	CONSTRAINT FK
	FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID) ON DELETE CASCADE
													ON UPDATE CASCADE);

/*GO
CREATE TRIGGER RET1
ON RETURNED
FOR INSERT
AS
declare @fine int, @BOOK_ID INT
SET @BOOK_ID=(SELECT BOOK_ID FROM INSERTED)
IF EXISTS (SELECT I.CUSTOMER_ID, I.BOOK_ID FROM INSERTED I , ISSUE J WHERE I.CUSTOMER_ID=J.CUSTOMER_ID AND I.BOOK_ID=J.BOOK_ID )

	IF (SELECT CUSTOMER_ID FROM INSERTED) IN (SELECT STUDENT_ID FROM STUDENTS)
		BEGIN
			UPDATE RETURNED
			SET RETURN_DATE=(SELECT RETURN_DATE FROM ISSUE WHERE BOOK_ID=(SELECT BOOK_ID FROM INSERTED))
			WHERE ACTUAL_RETURN=(SELECT ACTUAL_RETURN FROM INSERTED) AND BOOK_ID=(SELECT BOOK_ID FROM INSERTED)
			SET @fine=(SELECT 100*DATEDIFF(DAY,RETURN_DATE,ACTUAL_RETURN) FROM RETURNED
			WHERE ACTUAL_RETURN=(SELECT ACTUAL_RETURN FROM INSERTED) AND BOOK_ID=(SELECT BOOK_ID FROM INSERTED) )
			IF @fine<0
				SET @fine=0
			UPDATE RETURNED
			SET FINE=@fine
			WHERE ACTUAL_RETURN=(SELECT ACTUAL_RETURN FROM INSERTED) AND BOOK_ID=(SELECT BOOK_ID FROM INSERTED)
		PRINT('����� �������� �������')
		EXEC CHANGING_RETURNED @BOOK_ID
		END
	ELSE
		BEGIN
			UPDATE RETURNED
			SET RETURN_DATE=(SELECT RETURN_DATE FROM ISSUE WHERE BOOK_ID=(SELECT BOOK_ID FROM INSERTED))
			WHERE ACTUAL_RETURN=(SELECT ACTUAL_RETURN FROM INSERTED) AND BOOK_ID=(SELECT BOOK_ID FROM INSERTED)
			
			SET @fine=(SELECT 150*DATEDIFF(DAY,RETURN_DATE,ACTUAL_RETURN) FROM RETURNED
			WHERE ACTUAL_RETURN=(SELECT ACTUAL_RETURN FROM INSERTED) AND BOOK_ID=(SELECT BOOK_ID FROM INSERTED))
			IF @fine<0
				SET @fine=0
			UPDATE RETURNED
			SET FINE=@fine
			WHERE ACTUAL_RETURN=(SELECT ACTUAL_RETURN FROM INSERTED) AND BOOK_ID=(SELECT BOOK_ID FROM INSERTED)
		PRINT('����� ������������� �������')
		EXEC CHANGING_RETURNED @BOOK_ID
		END

IF NOT EXISTS (SELECT I.CUSTOMER_ID, I.BOOK_ID FROM INSERTED I , ISSUE J WHERE I.CUSTOMER_ID=J.CUSTOMER_ID AND I.BOOK_ID=J.BOOK_ID )
	BEGIN
		ROLLBACK TRAN
		PRINT('�������� �� ���� ����� �����')
	END*/
--DROP TABLE RETURNED
--DROP TRIGGER RET1

/*
CREATE PROCEDURE CHANGING @BOOK_ID VARCHAR(25)
AS
UPDATE BOOK_ISBN
SET ACCESS_NUMBER=(SELECT ACCESS_NUMBER FROM BOOK_ISBN WHERE BOOK_NAME=(SELECT TOP 1 BOOK_NAME FROM BOOKS WHERE BOOK_ID=@BOOK_ID) )-1
WHERE BOOK_NAME=(SELECT TOP 1 BOOK_NAME FROM BOOKS WHERE BOOK_ID=@BOOK_ID)*/
/*
CREATE PROCEDURE CHANGING_RETURNED @BOOK_ID VARCHAR(25)
AS
UPDATE BOOK_ISBN
SET ACCESS_NUMBER=(SELECT ACCESS_NUMBER FROM BOOK_ISBN WHERE BOOK_NAME=(SELECT TOP 1 BOOK_NAME FROM BOOKS WHERE BOOK_ID=@BOOK_ID))+1
WHERE BOOK_NAME=(SELECT TOP 1 BOOK_NAME FROM BOOKS WHERE BOOK_ID=@BOOK_ID)

*/
/*
CREATE TRIGGER RET2
ON RETURNED
AFTER INSERT
AS
DELETE ISSUE
WHERE BOOK_ID=(SELECT BOOK_ID FROM INSERTED)*/
--sp_settriggerorder @triggername = 'RET1', @order = 'first', @stmttype = 'INSERT'
/*
SELECT B1.ISBN, B1.BOOK_NAME, S.STUDENT_NAME, I.* 
FROM ISSUE I
JOIN STUDENTS S
ON S.STUDENT_ID=I.CUSTOMER_ID
JOIN BOOKS B2
ON B2.BOOK_ID=I.BOOK_ID
JOIN BOOK_ISBN B1
ON B1.BOOK_NAME=B2.BOOK_NAME

SELECT B1.ISBN, B1.BOOK_NAME, T.TEACHER_NAME, I.* 
FROM ISSUE I
JOIN TEACHERS T
ON T.TEACHER_ID=I.CUSTOMER_ID
JOIN BOOKS B2
ON B2.BOOK_ID=I.BOOK_ID
JOIN BOOK_ISBN B1
ON B1.BOOK_NAME=B2.BOOK_NAME*/

--USE LIBRARY
--SELECT * FROM RETURNED
--SELECT * FROM ISSUE
--INSERT INTO RETURNED VALUES(202017,144,'2022-06-11','2023-06-13',0)
--SELECT * FROM BOOK_ISBN
--SELECT * FROM BOOKS
--INSERT INTO ISSUE VALUES(302004,138,'2020-09-12',DEFAULT)

--SELECT * FROM BOOK_ISBN